// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  mantleApiToken String?
}



model TrafficEvent {
  id         Int      @id @default(autoincrement())
  shopDomain String
  eventDate  DateTime
  pageUrl    String?
}



model Metric {
  id                String   @id @default(cuid())
  shop              String
  createdAt         DateTime @default(now())
  ttfb              Int? // Convert '162ms' to 162 before saving
  fcp               Int?
  lcp               Int?
  fid               Int?
  cls               Float?
  domLoad           Int?
  fullLoad          Int?
  dnsTime           Int?
  tcpTime           Int?
  sslTime           Int?
  requestTime       Int?
  responseTime      Int?
  domInteractive    Int?
  firstPaint        Int?
  totalBlockingTime Int?
  usedMemoryMB      Float?
  totalMemoryMB     Float?
  limitMemoryMB     Float?
  networkType       String?
  rtt               Int?
  downlink          Float?
  saveData          Boolean?
}


model SessionCount {
  id        String   @id @default(uuid()) // now required
  shop      String
  count     Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([shop, createdAt])
}



model SessionCheckout {
  id                   String    @id @default(uuid())
  shop                 String    // The shop domain (normalized)
  sessionIdFromPixel   String    @unique // Unique session ID generated by the Web Pixel
  createdAt            DateTime  @default(now()) // When the session record was first created
  updatedAt            DateTime  @updatedAt // Last time the session record was updated
  pageViews            Int       @default(1) // Number of page views within this session
  hasInitiatedCheckout Boolean   @default(false) // Whether this session initiated a checkout
}